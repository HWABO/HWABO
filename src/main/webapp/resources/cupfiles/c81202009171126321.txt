메인 로그인, 로그아웃 오류 와 해결방법
- 에러를 많이 만들면 유리?

- pdf열고 
학습모듈

4p 
3. 통합개발환경 (Integrated Development Environment, IDE)
통합 개발 환경은 코딩, 디버그, 컴파일, 배포 등 프로그램 개발에 관련된 모든 작업을 하
나의 프로그램 안에서 처리하는 환경을 제공하는 소프트웨어이다. 기존 소프트웨어 개발
에서는 컴파일러, 텍스트 편집기, 디버거 등을 별도로 사용했으나 현재 통합개발환경에서
는 프로그램들을 하나로 묶어 대화형 인터페이스를 제공한다. 

7p 가~사
(3) 네트워크 프로그래밍을 구현하기 위한 서버를 설치하기 전 필요 사항을 확인한다.
(가) 서버, 네트워크 등의 최적 구성 위한 토폴로지 구성 형태를 확인한다.
(나) 신규 서버 추가, 서버 내부 장치 등의 확장성 지침을 확인한다.
(다) 서버 및 데이터베이스에 대해 지원되는 운영체제가 실행되는지 확인한다.
(라) 하드웨어(CPU, 메모리, 하드디스크, 그래픽 등)의 권장사항을 확인한다.
(마) 서버 및 데이터베이스의 공간 요구사항을 확인한다.
(바) 관리 서버의 사전 설치 소프트웨어가 설치되는지 확인한다.
(사) 보안 고려사항(Secure OS 적용가능성 등)을 점검한다.

12p
 자바 가상 머신(Java Virtual Machine, JVM)
자바가상머신은 컴파일된 자바 바이트 코드와 실제로 프로그램의 명령어를 실행하는 마이크
로 프로세서 (또는 하드웨어 플랫폼) 간에 인터페이스 역할을 하는 소프트웨어이다. 
1. 클래스 로더(Class Loader)
클래스 파일을 메모리에 올려서 실행하는 부분을 담당한다. Class Loader로 인해서
‘.class’ 확장자의 파일은 플랫폼에 독립적으로 JVM(Java Virtual Machine)이 설치된 환
경에서는 자바 프로그램을 실행할 수 있다. 
4. 가비지 콜렉터(Garbage Collector)
멀티 프로세스 환경에서 다수의 클래스 파일이 수행되면서 힙 메모리에 남아 있는 데이터
를 효율적으로 관리(삭제)하는 역할을 한다. 프로그램 환경에서 메모리 관리 기능 담당한다


13p (객체지향방법론 표)
캡슐화 객체의 상세한 내용을 객체 외부에 철저히 숨기고 단순히 메시지만으로 객
체와의 상호 작용을 하게 하는 것
추상화 현실세계의 사실을 그대로 객체로 표현하기보다는 문제의 중요한 측면을 주
목하여 상세내역을 없애 나가는 과정
다형성 하나의 인터페이스를 이용하여 서로 다른 구현 방법을 제공하는 것
상속성 슈퍼클래스가 갖는 성질을 서브클래스에 자동으로 부여하는 개념

23p
1. HTTP(HyperText Transfer Protocol)
HTTP는 WWW(World Wide Web)상에서 정보를 주고받을 수 있는 프로토콜이다. 주로
Html 문서를 주고받는 데에 쓰인다. TCP와 UDP를 사용하며, 80번 포트를 사용한다. 2. FTP(File Transfer Protocol)
FTP는 TCP/IP 프로토콜을 가지고 서버와 클라이언트 사이의 파일 전송을 하기 위한 프로
토콜이다. 연결의 종류에는 명령 연결, 데이터 전송용 연결이 존재한다. 3. SMTP(Simple Mail Transfer Protocol)
SMTP는 인터넷에서 이메일을 보내기 위해 이용되는 프로토콜이다. 사용하는 TCP 포트번
호는 25번이다. 상대 서버를 지시하기 위해서 DNS의 MX레코드가 사용된다

24p
 네트워크 소켓
인터넷 소켓(Internet Socket, Socket 또는 Network Socket 라고 부르기도 한다.)은 네트워크로
연결되어 있는 컴퓨터 통신의 접점에 위치한 통신 객체이다. 네트워크 통신을 위한 프로그램
들은 소켓을 생성하고, 이 소켓을 통해서 서로 데이터를 교환한다.

30p
1. 데이터베이스 정규화
이상현상을 야기하는 함수적 종속성을 제거하기 위해 릴레이션을 작은 여러 릴레이션으로
무손실 분해(Lossless Decomposition) 하는 과정이다. 데이터 일관성 유지, 자료구조의 안전
성 확보, 자료 불일치성 최소화, 데이터 중복 제거 등을 위해 실시하게 된다. 정규화는 1
차 정규화, 2차 정규화, 3차 정규화, BCNF 정규화, 4차 정규화, 5차 정규화 등이 있다

 데이터베이스
데이터베이스란 어느 한 조직의 여러 응용 시스템이 공용할 수 있도록 통합, 저장된 운영 데
이터의 집합이다. 데이터베이스는 통합 데이터, 저장 데이터, 운영 데이터, 공용 데이터여야
한다. 

50p(표 3-4)
D 테스트케이스를 식별하기 위한 고유번호이다. 사전조건 테스트가 수행되기 위해 선결되어야 하는 조건에 대한 정의이다. 테스트 프로시저 테스트가 수행되어야 하는 순서이다. (일반적으로 7단계 이하가 적절함.)
기대결과 테스트 실행 후 의도대로 동작하였는지를 판단하는 근거이다. 합격/불합격 테스트케이스를 위한 결과에 대한 최종 판결을 의미한다.


59p
 디버깅(Debugging)
디버깅은 오류의 존재를 확인하는 것부터 시작하여 프로그램 내에서 의심스러운 오류의 정확
한 성질과 있는 위치를 찾아내는 것, 오류를 수정하는 작업으로 나누어진다. 오류의 위치를
발견할 때에는 오류의 징후(徵候)와 관계되는 정보를 충분히 분석하고 디버깅 도구는 두 번
째 수단으로 사용하다. 

60p
 인스펙션
인스펙션은 개발 제품 및 개발 영역에 익숙한 다수의 기술 전문가가 개발 제품의 기술적 정확
성을 확인하여 소프트웨어 관련 문제들을 최대한 발견하기 위한 활동이다(IEEE 1028). 조기에
결함을 발견하고, 결함을 확인한 후 발견된 결함을 기록하고 수정하는 과정을 거치게 된다. 1. 시스템 설계 인스펙션
요구명세, 성능명세, 인터페이스 설계를 점검하여 모듈의 전반적인 설계 및 기능상의 결함
을 도출한다. 설계 작업의 입력(계약 등), 기능 할당 및 흐름, 인터페이스를 검사한다. 2. 상세 설계 인스펙션
시스템 전체 설계의 목적을 반영하도록 각 모듈이 설계(상세 설계)되었는지 점검한다. 프
로시저 사이의 인터페이스나 모듈의 성능 영향도 등을 검사한다. 3. 코드 인스펙션
코드가 요구 명세와 설계 명세 및 인터페이스 명세에 적합한지 검사한다. 설계의 정확한
구현여부, 제품의 국제표준 및 규격성 등을 중점 점검한다.  테스트 기반 프로그램법(TDD, Test Driven Development)
테스트 기반 프로그램법은 매우 짧은 개발 사이클을 반복하는 소프트웨어 개발 프로세스이
다. 우선 개발자는 바라는 향상 또는 새로운 함수를 정의하는(초기적 결함을 점검하는) 자동
화된 테스트 케이스를 작성한다. 그런 후에 그 케이스를 통과하기 위한 최소한의 양의 코드
를 생성한다. 그리고 마지막으로 그 새 코드를 표준에 맞도록 리팩토링한다. 1. 사용자 요구사항을 정의한다. 사용자, BA, 제품 개발자 등이 요구사항의 User Story 작성한다. 2. 테스트 케이스를 생성한다. 사용자, 테스터 등 관련자들이 테스트케이스를 상세하게 작성한다. 3. 코드를 작성한다. 개발자가 개발 단계로 테스트케이스를 통과하는 코드를 작성한다. 4. 클린 코드를 구현하기 위해 리팩토링을 수행한다. Bad smell을 제거하여 리팩토링을 수행한 후 Simple Code에 대한 테스트를 수행한다.

72p
 코드 스멜(Code Smell)
소스코드에 상당히 문제가 있음을 나타내는 어떤 낌새를 나타내는 것으로 리팩토링을 통해서
코드 스멜(Code Smell)을 제거하고 품질 좋은 코드를 작성해야 한다. 1. 같은 코드가 여러 곳에 존재하는 중복된 코드로 코드 스멜(Code Smell)이 발생한다. 2. 클래스, 메소드, 함수, 프로시저의 길이가 매우 길어져서 발생한다. 3. 다른 클래스의 메소드들을 너무 많이 사용하는 기능 집착으로 발생한다. 4. 다른 클래스의 구현에 세밀하게 의존하는 클래스로서 부적절한 관계를 형성한다. 5. 상속을 거부하는 현상으로 부모 클래스의 규약을 지키고 않은 채, 메소드 오버라이드
(Method Override)를 하는 경우에 발생한다. 

 프로그램 삽입문구
프로그램 수행에는 영향을 주지 않고 사람이 명확하게 판독하는 데 도움을 주기 위해 컴퓨터
프로그램과 제어 언어 또는 데이터 집합 내에 삽입해 넣는 정보를 말한다. 프로그램의 삽입
문구는 개발표준에 따라서 작성 원칙을 준수하여 적용하여야 한다

73p
r시큐어 코딩
소프트웨어 개발 과정에서 개발자의 지식 부족이나 실수, 프로그래밍 언어의 고유 특징 등으
로 발생할 수 있는 취약점을 최소화하기 위하여, 설계 단계부터 보안을 고려하여 코드를 작
성하는 개발 방식이다.

83p
클린 코드(Clean Code)
논리가 간단하고 버그를 원천 차단할 수 있는 효율적인 코드작성을 위해 의존성을 최소로 하
고 사람이 이해할 수 있는 가독성, 목적성이 뛰어난 명확한 코드이다. Clean Code는 의존성
최소화, 단일 책임의 원칙, 버그유입 최소화, 가독성 향상, 중복코드 최소화, 변경용이, 작은
코드 등의 특징이 있다

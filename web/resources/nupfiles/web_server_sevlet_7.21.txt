회원서비스
공지사항 서비스


Stateless Protocol (연결 상태)
	기본적으로 HTTP는 (연결)상태를 유지하지 않는 무상태 프로토콜

	클라이언트가 접속 요청 > 리퀘스트 리스폰스하고나면 자동으로 연결을 끊음
	동일한 사용자가 다시 요청했을 때 동일한 사용자라는 것을 인식하지 못한다.
	 > 로그인 유지를 어떻게 할 것인가 ?  총 3가지 방법 사용가능. (세션, 쿠키, URL재작성)


상태관리 매커니즘 : 
	리퀘스트 객체도 맵구조라서 저장능력이있다.
	web에서 저장능력을 가지고 있는 객체들은 모두 map이다.
	 ===> (String key, Object value) 

	쿠키는 리퀘스트에 담긴다 > 응답 보낼때 자동으로 이동 > 브라우저에 히스토리로 남긴다.
	 > 또 요청있으면 또 리퀘스트에 담겨져서 이동
	문제점 : 보안등급을 높이면 쿠키를 리퀘스트에 담을 수 없다. = 브라우저에 남길 수 없다.
	            프로그램은 어떠한 상황에서도 동일한 결과를 주어야한다. 따라서 쿠키로는 문제해결 X

	URL 재작성 : URL뒤에다가 계속해서 로그인정보를 붙인 상태로 다니는 것. 
		    드래그만 해서 봐도 다 보임. 해킹위험

	그렇다면 남은 것은 세션뿐
	세션 : 세션 객체는 톰캣(서버)에 저장된다. [ 톰캣의 세션객체 저장소 : 톰캣의 세션 스코프 ] 
	         저장되는 위치가 서버. 대신 리퀘스트에는 세션객체만 넣어서 간다.
	         리퀘스트는 누구의 세션인지 알 수 있는 세션아이디를 기록된 상태로 다닌다.
	         세션아이디는 유일값이다. 세션객체가 사라지면 기록된 세션아이디 자동으로 삭제된다.

	로그인만 유지되어도 위의 기술을 쓸 필요가 없지만 HTTP는 StatelessProtocol이라서 사용해야한다.


리퀘스트에 세션아이디가 있으면 가져오고, 리퀘스트에 세션아이디가 없으면 새로 만들어라
request.getSessoin(true) 
request.getSessoin()

세션아이디가 있으면 가져오고 아니면 null return
request.getSessoin(false)


세션객체에도 정보를 저장할 수 있다. 우리가 만들고 로그아웃하기 전까지는 계속 존재
로그인상태로 해야될 것들은 세션에 저장해 놓으면 된다.
setAttribute(key, value)

꺼낼때는 
getAttribute(key) :  오브젝트 형태로 리턴되니까 형변환 필수

저장된 정보 삭제 (세션삭제 X)
removeAttribute(key)

로그아웃할 때 세션을 삭제할 때 사용할 메소드
public void invalidate()


javaEE doc
	https://docs.oracle.com/javaee/7/api/toc.htm
	javax.servlet.http


세션객체가 존재하는 동안 어떠한 것도 이 세션을 사용할 수 있다. (공유개념)


로그인하면 index.jsp에 안보이던 로그아웃버튼 보이게 해야한다.
html문에 if else 쓸 것임


JSP
	매번 서블릿에서 내보내는 작업을 JSP로 진행
	서블릿을 개조한 것인 JSP이고 출력만 담당. ( 서블릿에서 출력만 빼온 것이라고 생각 )
	톰캣이 컴파일 해준다.
	<%    %> : 안의 구문은 JSP로 인식
 1. Scriptlet tag : <%          %> 자바 메소드 작성할 때. 이 안에서의 주석은 //
 2. Directive tag : <%@       %> 페이지에 어떤 설정을 담당하는 내용. ex) page 설정내용. 한번만 사용가능
			     보통 jsp 파일의 첫줄에 써져있다.
 3. Comment tag : <%--    --%>
 4. Expression tag : <%=      %> println의 의미. 출력담당
 5. Declaration tag :  <%!      %> 멤버변수와 메소드 추가 작성.
	사용하다보면 5는 별로 사용안함. 보통 1, 4번 사용한다.

	JSP에는 이미 만들어져서 제공되고 있는 객체들이 있다.
	 > 빌트인 객체 : request, response, out, session, application, page, exception
	 > 꺼내서 쓰기만 하면된다. good

html 내에 코드를 포함하는 방법
	Template Page

html 내에 코드를 포함하는 기술 ( 유지보수가 복잡하니까 다 java로 바꾸는 추세 )
	PHP
	ASP
	JSP : java 코드를 포함하는 html
	       JSp page는 Web Conainer 에 의해 Servlet으로 변환되며, 
	      변환된 Servlet은 해당 JSP page에 대한 요청을 처리.  -----> 결국 Servlet


iot 센서? 빅데이터분석

index.jsp 파일에 if문 작성

member/controller에 LogoutServlet 서블릿파일 만듬 /logout

톰캣은 메소드방식으로 전송하라고 정해놓음.
기본 전송방식 : get

모든 것은 request 하고 response 


<a>회원가입 </a>  회원가입페이지로 이동


html 고치면 서버 restart안해도 된다.

아래 3개만 웹에서 사용가능.
jpg 는 사진
jif 는 그림
png 

모든 태그는 눈에 안보이지만 여백을 가지고 있다. padding : 0; 해서 없앤다


표 관련 태그 ( 테이블 태그 )
	정말 표를 만들수도 있지만 레이아웃의 역할도 한다. 
	깔끔하게 줄 맞춰줌

	<TR> : 줄을 의미하는 태그. 5번쓰면 5줄짜리 테이블
	<TD> : 한칸을 의미
	<TH> : 한칸을 의미, 진한 글씨.

	칸표시는 TD, TH 중에서 정해서 사용하면 된다.


views > example  > 새파일 > HTML파일 > 저장이름 : 표연습.html

도구 > 기본설정 > 파일 > 저장시 백업 파일 생성 (체크해제) 웹파일에는 이거 있으면 안됨.


html : 줄마다 칸수가 같아야한다.

셀과 셀사이에 간격이 잡혀있음

td에 width 해주면 아래의 줄도 넓이맞춰짐.


줄별 칸수는 같아야한다. 
 > cell 머지기능 사용해서 병합할 수 있다.
 > 대신 가장 위의 칸에, 가장 왼쪽의 칸에 컬스팬속성 지정
colspan="2" 옆으로 2칸을 합치겠다는 의미. > 합쳐지고 나서 3번칸은 지워주어야한다.
rowspan="2" 아래로 2칸을 합치겠다는 의미. > 합쳐지고 나서 8번칸은 지워주어야한다.

<form>
<table>
</table> 이렇게 안에서 사용한 것은 안에서 닫아주고 .
</form> 밖에서 사용한 것은 밖에서 닫아준다

서블릿컨트롤러 이름을 action에 
개인정보니까 post

절대경로는 /하고 context 이름 꼭 써주어야한다.
	/test1/index.jsp
링크, 폼, 테이블, 폼 컨트롤

반드시 name 있어야한다.
required = 필수입력사항임을 알려줌
 > 원래는 직접 유효성검사를 했어야했다. 편리  


버튼이나 서브밋은 누르면서 같이 발생될수 있다 ? 이벤트 전달안되도록 해주어야한다.

*이 름  required 텍스트상자
*아이디 required 텍스트상자 + 버튼(return false)
*암 호 required 암호입력란 
*암호확인 (전송은 안함. 자바스크립트에서 동일한지 확인만.) 
	 암호입력란 name을 id로 바꿈

	name은 서버로 보내고
	id는 자바스크립트로 보내고 
	둘이 쓰임새가 달라서 이름 같아도 상관없다.

// onkeypress="checkPwd();"   > 키보드 입력이 발생했을 때 저 메소드를 실행?

*성 별      여러개중에 하나만 선택하는것이 라디오. 그룹을 지어줘야한다.
	그룹지어줄라면 name을 같게하면 된다
	value 값으로 전송되니까 테이블에 입력되는 형태로 써준다.


*나 이
	숫자 (크롬브라우저로 가면 화살표버튼보임)

전화번호

이메일

취미  :   테이블 안에 테이블 가능 = 칸 안이 정렬되기를 원할 때 
	확인란

하고싶은말 : 입력 영역

onsubmit : form타입에서 쓸 수 있는 이벤트
	  아래의 submit이 클릭되었을 때  
	   onsubmit="return validate();"
	    > 앞에 return 안 쓰면 틀려도 전송가버림. 꼭 쓰기


자바스크립트는 변수 없음. var이라고 씀
제공되는 사용법만 보고 따라서 쓰면 된다.

자바스크립트는 == 써도 문자열비교가능.

암호비교할 때 !==도 되고 != 도된다.
자료형도 같고 값도 같고 ===

타입도 같고 값도 같으면 ==


m 컨트롤러에 new 서블릿 > 엔롤서블릿 (/minsert)

.java 클래스가 모델
html이 뷰
서블릿이 컨트롤러


문자셋은 대소문자상관없음 ( uft-8 ) 보낸 페이지의 문자셋에 맞추는 것.

hobby는 getParameter 쓰면 안되고 (값이 여러개라서)
	getParameterValues 써야한다. 


저장할때는 join으로 합치고 저장.
스프릿? 해서 다시 배열로 만들어주면된다.


error.jsp 의 page란에 isErrorPage="true" Tj wnsek,

errorPage="views/common/error/jsp"
모든 jsp 파일의 page란에 써준다


RequestDispatcher  이거 쓸 때에는 무조건 상대경로만

다른 것들은 절대경로 상대경로 둘다 가능한데 이건 상대경로만








서블릿은 항상 루트에서 시작하고 있다고 생각하면 된다. root에서 views 폴더로 접근하면 된다.



